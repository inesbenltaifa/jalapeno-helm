apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: {{ .Values.grafana.name }}
    app.kubernetes.io/instance: jalapeno
    app.kubernetes.io/name: {{ .Values.grafana.name }}
  name: {{ .Values.grafana.name }}
  namespace: jalapeno
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.grafana.replicas }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: {{ .Values.grafana.name }}
      app.kubernetes.io/instance: jalapeno
      app.kubernetes.io/name: {{ .Values.grafana.name }}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/component: {{ .Values.grafana.name }}
        app.kubernetes.io/instance: jalapeno
        app.kubernetes.io/name: {{ .Values.grafana.name }}
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/component: {{ .Values.grafana.name }}
                  app.kubernetes.io/instance: jalapeno
                  app.kubernetes.io/name: {{ .Values.grafana.name }}
              namespaces:
              - jalapeno
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: GF_SECURITY_ADMIN_PASSWORD
              name: {{ .Values.grafana.name }}-admin-secret
        envFrom:
        - configMapRef:
            name: {{ .Values.grafana.name }}-envvars
        image: "{{ .Values.grafana.image.repository }}:{{ .Values.grafana.image.tag }}"
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/health
            port: dashboard
            scheme: HTTP
          initialDelaySeconds: 120
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: grafana
        ports:
        - containerPort: {{ .Values.grafana.service.port }}
          name: dashboard
          protocol: TCP
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/health
            port: dashboard
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /opt/bitnami/grafana/data
          name: data
        - mountPath: /etc/grafana/provisioning/datasources
          name: {{ .Values.grafana.name }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 1001
        runAsNonRoot: true
        runAsUser: 1001
      # serviceAccount: default 
      # serviceAccountName: default 
      terminationGracePeriodSeconds: 30
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: {{ .Values.grafana.name }}
      - configMap:
          defaultMode: 420
          name: {{ .Values.grafana.name }}-envvars
        name: {{ .Values.grafana.name }}
